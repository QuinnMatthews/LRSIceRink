@page "/audit"
@attribute [Authorize(Roles = "GlobalAdmin, ReportViewer")]
@using LRSIceRink.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using System.Globalization
@using Blazorise.Extensions
@implements IDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Audit Logs</PageTitle>

<h1>Audit Logs</h1>
<p>Top 1,000 records shown</p>
<LoadingIndicator @bind-Visible="@_busy">
    @if (_hasLoaded)
    {
        <Accordion>
            <Collapse Visible="@FilterVisible">
                <CollapseHeader><Heading Size="HeadingSize.Is5">
                    <Button Clicked="@(() => FilterVisible = !FilterVisible)" Block Outline Color="Color.Primary">Filters</Button>
                </Heading></CollapseHeader>
                <CollapseBody>
                    <Fields>
                        <Field>
                            <FieldLabel>Users</FieldLabel>
                            <Autocomplete TItem="ApplicationUser"
                                          TValue="ApplicationUser"
                                          Data="@_users"
                                          TextField="@((item) => item.GetNameReference())"
                                          ValueField="@((item) => item)"
                                          SelectionMode="AutocompleteSelectionMode.Multiple"
                                          Filter="AutocompleteFilter.Contains"
                                          @bind-SelectedValues="_userFilter"
                                          Immediate="true"
                                          @ref="userAutocomplete">
                            </Autocomplete>
                        </Field>
                        <Field>
                            <FieldLabel>Skates</FieldLabel>
                            <Autocomplete TItem="Skate"
                                          TValue="Skate"
                                          Data="@_skates"
                                          TextField="@((item) => item.Name)"
                                          ValueField="@((item) => item)"
                                          SelectionMode="AutocompleteSelectionMode.Multiple"
                                          Filter="AutocompleteFilter.Contains"
                                          @bind-SelectedValues="_skateFilter"
                                          Immediate="true"
                                          @ref="skateAutocomplete">
                            </Autocomplete>
                        </Field>
                    </Fields>
                    <Field>
                        <FieldLabel>Action</FieldLabel>
                        <TextEdit @bind-Text="@_actionFilter" Immediate="true"/>
                    </Field>
            <Button Color="Color.Primary" Clicked="() => {skateAutocomplete.Clear(); userAutocomplete.Clear(); _actionFilter = null;}">Reset Filters</Button>
                </CollapseBody>
                </Collapse>
            </Accordion>
    <br/>
        <br/>
        @if(_auditLogs is not null) {
            <Table Striped>
                <TableHeader>
                    <TableHeaderCell>Timestamp (UTC)</TableHeaderCell>
                    <TableHeaderCell>User</TableHeaderCell>
                    <TableHeaderCell>Skate</TableHeaderCell>
                    <TableHeaderCell>Action</TableHeaderCell>
                </TableHeader>
                <TableBody>
                    @foreach (var log in _auditLogs)
                    {
                        if (!ShouldIncludeLog(log))
                        {
                            continue;
                        }
                        <TableRow>
                            <TableRowHeader>@log.Timestamp</TableRowHeader>
                            <TableRowCell>
                                @if(log.User is not null) {
                                    @($"{log.User.FirstName} {log.User.LastName}")
                                }
                            </TableRowCell>
                            <TableRowCell>
                                @if(log.Skate is not null) {
                                    @log.Skate.Name
                                }
                            </TableRowCell>
                            <TableRowCell>
                                @log.Action
                            </TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        } else
        {
            <p>Uh oh! Something went wrong</p>
        }
    }
    </LoadingIndicator>
    
@code {
    private bool _busy, _hasLoaded;
    private bool FilterVisible;

    private List<AuditLog> _auditLogs;

    private List<Skate>? _skates;
    private List<Property>? _properties;
    private IEnumerable<ApplicationUser> _users;

    private Autocomplete<ApplicationUser, ApplicationUser> userAutocomplete;
    private Autocomplete<Skate, Skate> skateAutocomplete;

    private string? _actionFilter;
    private List<Skate>? _skateFilter;
    private List<ApplicationUser>? _userFilter;

    private ApplicationDbContext? Context;
    protected override async Task OnInitializedAsync()
    {
        _busy = true;
        _hasLoaded = false;
        Context = await DbFactory.CreateDbContextAsync();
        if (Context is not null)
            {

                //Get all non-archived skates
                _skates = await Context.Skates.OrderByDescending(s=>s.IsArchived).ThenBy(s => s.Name).ToListAsync();
                //Get global properties
                _properties = await Context.Properties.ToListAsync();
                //Get All Users
                _users = await Context.Users.ToListAsync();
                //Get Top 1000 Audit Logs
                _auditLogs = await Context.AuditLogs
                    .Include(a=>a.Skate)
                    .Include(a=>a.User)
                    .OrderByDescending(a => a.Timestamp)
                    .Take(1000)
                    .ToListAsync();
            }
        await base.OnInitializedAsync();
        _busy = false;
        _hasLoaded = true;
    }
    public void Dispose()
    {
        Context?.Dispose();
    }

    private bool ShouldIncludeLog(AuditLog log)
    {
        bool matchesActionFilter = _actionFilter.IsNullOrEmpty() || log.Action.Contains(_actionFilter);

        bool matchesSkateFilter = _skateFilter.IsNullOrEmpty() || _skateFilter?.FirstOrDefault(s => log.Skate == s) is not null;

        bool matchesUserFilter = _userFilter.IsNullOrEmpty() || _userFilter?.FirstOrDefault(u => log.User == u) is not null;

        return matchesSkateFilter && matchesUserFilter && matchesActionFilter;
    }
}