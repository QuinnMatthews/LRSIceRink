@page "/UserAdmin"
@attribute [Authorize(Roles = "GlobalAdmin, UserAdmin")]
@using LRSIceRink.Data
@using LRSIceRink.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.UI.Services
@using System.Data.SqlTypes
@implements IDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMessageService MessageService
@inject IEmailSender EmailSender

<PageTitle>User Administration</PageTitle>

<h1>User Administration</h1>
<p>Here you can manage users and their permissions</p>
<LoadingIndicator @bind-Visible="@_busy">
    @if (_hasLoaded)
    {
        <Field>
            <TextEdit Placeholder="Search for user..." @bind-Text="_search" Immediate="true"/>
        </Field>
        @if (_users is not null)
        {
            <Table Striped>
                <TableHeader>
                    <TableHeaderCell>First Name</TableHeaderCell>
                    <TableHeaderCell>Last Name</TableHeaderCell>
                    <TableHeaderCell>Email</TableHeaderCell>
                    <TableHeaderCell>Roles</TableHeaderCell>
                    <TableHeaderCell></TableHeaderCell>
                </TableHeader>
                <TableBody>
                    @foreach(var user in _users.Where(s => (string.IsNullOrEmpty(_search) 
                                                            || (s.FirstName?.Contains(_search) ?? false) 
                                                            || (s.LastName?.Contains(_search) ?? false) 
                                                            || s.Email.Contains(_search)))) 
                    {
                        <TableRow>
                            <TableRowCell>@user.FirstName</TableRowCell>
                            <TableRowCell>@user.LastName</TableRowCell>
                            <TableRowCell>@user.UserName</TableRowCell>
                            <TableRowCell>
                                @foreach (var role in _roles)
                                {
                                    if (IsInRole(user, role))
                                    {
                                        <Badge Color = "Color.Info" Pill>@role.Name</Badge>
                                    }
                                }
                            </TableRowCell>
                            <TableRowCell><Button Color="Color.Primary" Clicked="() => ShowUpdateUserModel(user)">Edit User</Button></TableRowCell>
                            <TableRowCell><Button Color="Color.Secondary" Clicked="() => ShowUserAuditHistory(user)">View Audit Log</Button></TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        }
        else
        {
            <p>Uh oh! Either something went wrong or there are no users</p>
        }

        //Edit User Modal
        @if (selectedUser is not null)
        {
            <Modal @bind-Visible="@_showEditUserModal" Closed="SaveChanges">
                <ModalContent Centered>
                    <ModalHeader>
                        <ModalTitle>Edit User</ModalTitle>
                        <CloseButton/>
                    </ModalHeader>
                    <ModalBody>
                        <Fields>
                            <Field>
                                <FieldLabel>First Name</FieldLabel>
                                <TextEdit  @bind-Text="@selectedUser.FirstName" Placeholder="Enter first name..."/>
                            </Field>
                            <Field>
                                <FieldLabel>Last Name</FieldLabel>
                                <TextEdit @bind-Text="@selectedUser.LastName"  Placeholder="Enter last name..." />
                            </Field>
                        </Fields>
                        <Field>
                            <FieldLabel>Email</FieldLabel>
                            <TextEdit @bind-Text="@selectedUser.Email" Placeholder="Enter email..."/>
                        </Field>
                        <Field>
                            <FieldLabel>Roles</FieldLabel>
                            <FieldBody>
                        @foreach (var role in _roles)
                        {
                            if (IsInRole(selectedUser, role))
                            {
                                <Badge Color="Color.Info" CloseClicked="async () => await RemoveUserRole(selectedUser, role)" Pill>@role.Name</Badge>
                            }
                        }
                            </FieldBody>
                        </Field>

                            <Dropdown>
                                <DropdownToggle Color="Color.Info">Add Role</DropdownToggle>
                                <DropdownMenu>
                                    @foreach (var role in _roles)
                                    {
                                        if(!IsInRole(selectedUser, role)) {
                                            <DropdownItem Clicked="async () => await AddUserRole(selectedUser, role)">@role.Name</DropdownItem>
                                        }
                                    }
                                </DropdownMenu>
                            </Dropdown>
                    </ModalBody>
                    <ModalFooter Flex="Flex.JustifyContent.Between">
                            <Button Color="Color.Danger" Clicked="async () => await DeleteUser(selectedUser)">Delete User</Button>
                            <Button Color="Color.Primary" Clicked="() => _showEditUserModal = false">Close</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        }
        //User Audit History Modal
        @if (_userAuditLogs is not null)
        {
            <Modal @bind-Visible="_showUserAuditModal">
                <ModalContent Centered Size="ModalSize.ExtraLarge" Scrollable>
                    <ModalHeader>
                        <ModalTitle>Skate History</ModalTitle>
                        <CloseButton/>
                    </ModalHeader>
                    <ModalBody>
                        <Table Striped>
                            <TableHeader>
                                <TableHeaderCell>Timestamp (UTC)</TableHeaderCell>
                                <TableHeaderCell>Skate</TableHeaderCell>
                                <TableHeaderCell>Action</TableHeaderCell>
                            </TableHeader>
                            <TableBody>
                                @foreach (var auditlog in _userAuditLogs)
                                {
                                    <TableRow>
                                        <TableRowHeader>@auditlog.Timestamp.ToLocalTime().ToString("MM/dd/yyyy hh:mm tt")</TableRowHeader>
                                        <TableRowCell>
                                            @if (auditlog.Skate is not null)
                                            {
                                                <span>@auditlog.Skate.Name</span>
                                            }
                                        </TableRowCell>
                                        <TableRowCell>@auditlog.Action</TableRowCell>
                                    </TableRow>
                                }
                            </TableBody>
                        </Table>
                    </ModalBody>
                    <ModalFooter>
                        <Button Color="Color.Primary" Clicked="() => _showUserAuditModal = false">Close</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        }
    }
</LoadingIndicator>
<h3>Roll Descriptions</h3>
<ul>
    <li>Global Admin - Access to all areas</li>
    <li>User Admin - Access to add rolls to users</li>
    <li>Skate Admin - Access to Check Out, Skate Admin, and Skate Status pages </li>
    <li>Sharpening - Access to Sharpening Page</li>
    <li>Report Viewer - Access to Skate Status and Audit Log pages (Read-only role)</li>
    <li>Rental Operator - Access check skates in and out</li>
</ul>
@code {
    private bool _busy, _hasLoaded;
    private List<ApplicationUser>? _users;
    private string? _search;
    private List<Property>? _properties;
    private ApplicationUser loggedInUser;
    private List<ApplicationRole> _roles;
    private List<ApplicationUserRole> _userRoles;
    private ApplicationUser selectedUser;
    private bool _showEditUserModal, _showUserAuditModal;
    private List<AuditLog> _userAuditLogs;
    private ApplicationDbContext? Context;

    protected override async Task OnInitializedAsync()
    {
        _busy = true;
        _hasLoaded = false;
        Context = await DbFactory.CreateDbContextAsync();

        if (Context is not null)
        {
            //Get all skates
            _users = await Context.Users
                .OrderBy(u => u.UserName)
                .Include(u => u.UserRoles)
                .ToListAsync();
            //Get global properties
            _properties = await Context.Properties.ToListAsync();
            //Get all Roles
            _roles = await Context.Roles.ToListAsync();
            //Get all UserRoles
            _userRoles = await Context.UserRoles.ToListAsync();
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        loggedInUser = await UserManager.GetUserAsync(authState.User);

        await base.OnInitializedAsync();
        _busy = false;
        _hasLoaded = true;
    }
    public void Dispose()
    {
        Context?.Dispose();
    }
    protected async Task DeleteUser(ApplicationUser user)
    {
        _busy = true;
        AuditLog audit = new AuditLog() {
            Timestamp = DateTime.Now,
            User = loggedInUser,
        };
        var superAdminRole = await Context.Roles.Where(r => r.Name == "GlobalAdmin").FirstAsync();
        var superAdminUserRole = await Context.UserRoles.FirstOrDefaultAsync(ur => ur.Role == superAdminRole && ur.User == user);
        if (superAdminUserRole is not null) //User is superadmin
        {
            audit.Action = $"Tried to delete {user.FirstName} {user.LastName}. Access was denied.";
            await MessageService.Error("How dare you try to delete me!", "Access Denied");
        }
        else
        {
            audit.Action = $"Deleted {user.FirstName} {user.LastName}.";
            _users.Remove(user);
            Context.Remove(user);
            _showEditUserModal = false;
        }
        Context.AuditLogs.Add(audit);
        await Context.SaveChangesAsync();
        _busy = false;
    }

    protected async Task AddUserRole(ApplicationUser user, ApplicationRole role)
    {
        _busy = true;
        AuditLog audit = new AuditLog() {
            Timestamp = DateTime.Now,
            User = loggedInUser,
        };
        if(role == (await Context.Roles.Where(r => r.Name == "GlobalAdmin").FirstAsync()) && !IsInRole(loggedInUser, _roles.First(r => r.Name == "SupremeAdminOfTheUniverse")))
        {
            audit.Action = $"Tried to add {user.FirstName} {user.LastName} to {role.Name}. Access was denied";
            await MessageService.Error("You can't add new global admins.", "Access Denied");
        } else if (role == await Context.Roles.Where(r => r.Name == "SupremeAdminOfTheUniverse").FirstAsync())
        {
            audit.Action = $"Tried to add {user.FirstName} {user.LastName} to {role.Name}. Access was denied";
            await MessageService.Error("There can only be one!", "Access Denied");
        }
        else
        {
            var userRole = new ApplicationUserRole()
            {
                Role = role,
                User = user
            };
            audit.Action = $"Added {user.FirstName} {user.LastName} to {role.Name}.";
            _userRoles.Add(userRole);
            Context.Add(userRole);
        }
        Context.AuditLogs.Add(audit);
        await Context.SaveChangesAsync();
        _busy = false;
    }
    protected async Task RemoveUserRole(ApplicationUser user, ApplicationRole role)
    {
        _busy = true;
        AuditLog audit = new AuditLog() {
            Timestamp = DateTime.Now,
            User = loggedInUser,
        };
        if(
            role == await Context.Roles.Where(r => r.Name == "GlobalAdmin").FirstAsync() 
            && !IsInRole(loggedInUser, _roles.First(r => r.Name == "SupremeAdminOfTheUniverse"))
        ){
            audit.Action = $"Tried to remove {user.FirstName} {user.LastName} from {role.Name}. Access was denied";
            await MessageService.Error("You can't remove global admin, the authorities have been alerted", "Access Denied");
        } else if( role == await Context.Roles.Where(r => r.Name == "SupremeAdminOfTheUniverse").FirstAsync()){
                audit.Action = $"Tried to remove {user.FirstName} {user.LastName} from {role.Name}. Access was denied";
                await MessageService.Error("My power can never be removed Mwahaha", "Access Denied");
            }
        else
        {
            audit.Action = $"Removed {user.FirstName} {user.LastName} from {role.Name}.";
            var userRole = new ApplicationUserRole()
            {
                Role = role,
                User = user,
                UserId = user.Id,
                RoleId = role.Id
            };
            var _role = _userRoles.Find(ur => ur.Role == role && ur.User == user);
            Context.Remove(_role ?? userRole);
            _userRoles.Remove(_role);
        }
        Context.AuditLogs.Add(audit);
        await Context.SaveChangesAsync();
        _busy = false;
    }

    protected async Task ShowUpdateUserModel(ApplicationUser user)
    {
        AuditLog audit = new AuditLog() {
            Timestamp = DateTime.Now,
            User = loggedInUser,
            Action = $"Opened edit user screen for: {user.FirstName} {user.LastName}"
        };
        Context.AuditLogs.Add(audit);
        selectedUser = user;
        _showEditUserModal = true;
        await Context.SaveChangesAsync();
    }


    protected async Task SaveChanges()
    {
        await Context.SaveChangesAsync();
    }

    protected bool IsInRole(ApplicationUser user, ApplicationRole role)
    {
        return (_userRoles.FirstOrDefault(ur => ur.Role == role && ur.User == user) is not null);
    }
    protected async Task ShowUserAuditHistory(ApplicationUser user)
    {
        _busy = true;
        _userAuditLogs = await Context.AuditLogs
            .Where(a => a.User == user)
            .Include(a => a.Skate)
            .OrderByDescending(a=>a.Timestamp)
            .Take(100)
            .ToListAsync();
        _showUserAuditModal = true;
        _busy = false;
    }
}
