@page "/skateAdmin"
@attribute [Authorize(Roles = "GlobalAdmin, Operator")]
@using LRSIceRink.Data
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@inject ApplicationDbContext Context
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Skate Administration</PageTitle>

<h1>Skate Administration</h1>
<p>Here you can manually modify any of the skate properties</p>
<LoadingIndicator @bind-Visible="@_busy">
    @if(_hasLoaded) {
        <Field>
            <TextEdit Placeholder="Search for skate..." @bind-Text="_search" />
        </Field>

        @if(_skates is not null) {
            <Table Striped>
                <TableBody>
                    @foreach(var skate in _skates.Where(s => (string.IsNullOrEmpty(_search) || s.Name.Contains(_search)))) {
                        <TableRow>
                            <TableRowHeader>@skate.Name</TableRowHeader>
                            <TableRowCell>@skate.Status.ToString()</TableRowCell>
                            <TableRowCell>
                                <Row>
                                <Column>
                                    <NumericPicker Decimals="0" TValue="double" Value="skate.MinutesUsed" Min="0" ValueChanged="min => UpdateSkateMinutes(skate, min)"/>
                                </Column>
                                <Column>
                                    <span>minutes</span>
                                </Column>
                                </Row>
                            </TableRowCell>
                            <TableRowCell>
                                <Buttons>
                                    @if (skate.Status != SkateStatus.Available) {
                                        <Button Color="Color.Primary" Clicked="async () => await UpdateSkateStatus(skate, SkateStatus.Available)"> Available</Button>
                                    } else {
                                        <Button Color="Color.Secondary" Disabled> Available</Button>
                                    }
                                    @if(skate.Status != SkateStatus.InUse) {
                                        <Button Color="Color.Primary" Clicked="async () => await UpdateSkateStatus(skate, SkateStatus.InUse)"> In Use</Button>
                                    } else {
                                        <Button Color="Color.Secondary" Disabled> In Use</Button>
                                    }
                                    @if(skate.Status != SkateStatus.BeingSharpened) {
                                        <Button Color="Color.Primary" Clicked="async () => await UpdateSkateStatus(skate, SkateStatus.BeingSharpened)"> Being Sharpened</Button>
                                    } else {
                                        <Button Color="Color.Secondary" Disabled> Being Sharpened</Button>
                                    }
                                </Buttons>
                            </TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
            <Button Color="Color.Success" Size="Size.Small" Clicked="() => _addSkateModalVisible=true">Add Skate</Button>
            <Modal @bind-Visible="@_addSkateModalVisible">
                <ModalContent Centered>
                    <ModalHeader>
                        <ModalTitle>Add Skate</ModalTitle>
                    </ModalHeader>
                    <ModalBody>
                        <Field>
                            <FieldLabel>Name</FieldLabel>
                            <TextEdit Placeholder="Enter name..." @bind-Text="@_newSkateName" />
                        </Field>
                    </ModalBody>
                    <ModalFooter>
                        <Button Color="Color.Secondary" Clicked="() => { _addSkateModalVisible = false; }">Cancel</Button>
                        <Button Color="Color.Primary" Clicked="AddSkate">Add Skate</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        } 
    }
</LoadingIndicator>
@code {
    private bool _busy, _hasLoaded;
    private List<Skate>? _skates;
    private string? _search;
    private List<Property>? _properties;
    private bool _addSkateModalVisible;
    private string _newSkateName;
    private ApplicationUser user;

    protected override async Task OnInitializedAsync() {
        _busy = true;
        _hasLoaded = false;
        if(Context is not null) {
            //Get all skates
            _skates = await Context.Skates.OrderBy(s => s.Name).ToListAsync();
            //Get global properties
            _properties = await Context.Properties.ToListAsync();
        }
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = await UserManager.GetUserAsync(authState.User);
        await base.OnInitializedAsync();
        _busy = false;
        _hasLoaded = true;
    }

    protected async Task UpdateSkateStatus(Skate skate, SkateStatus newStatus) {
        _busy = true;
        AuditLog audit = new AuditLog()
        {
            Timestamp = DateTime.Now,
            Skate = skate,
            User = user,
            Action = $"Changed skate status from {skate.Status} to {newStatus}"
        };
        skate.Status = newStatus;
        Context.AuditLogs.Add(audit);
        await Context.SaveChangesAsync();
        _busy = false;
    }

    protected async Task UpdateSkateMinutes(Skate skate, double minutes)
    {
        _busy = true;
        AuditLog audit = new AuditLog() {
                Timestamp = DateTime.Now,
                Skate = skate,
                User = user,
                Action = $"Changed skate usage minutes from {(skate.MinutesUsed / 60):0.## hours} to {(minutes / 60):0.## hours}"
            };
        skate.MinutesUsed = minutes;
        Context.AuditLogs.Add(audit);
        await Context.SaveChangesAsync();
        _busy = false;
    }

    protected async Task AddSkate()
    {
        _busy = true;
        Skate skate = new Skate()
        {
            Name = _newSkateName
        };
        AuditLog audit = new AuditLog() {
            Timestamp = DateTime.Now,
            Skate = skate,
                User = user,
            Action = $"Added new skate"
        };
        _skates.Add(skate);
        Context.Skates.Add(skate);
        Context.AuditLogs.Add(audit);
        await Context.SaveChangesAsync();
        _newSkateName = "";
        _addSkateModalVisible = false;
        _busy = false;
    }
}
