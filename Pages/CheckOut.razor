@page "/checkout"
@attribute [Authorize(Roles = "GlobalAdmin, SkateAdmin, RentalOperator")]
@using LRSIceRink.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject ApplicationDbContext Context   
@inject IMessageService MessageService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Skate Check Out</PageTitle>

<h1>Rental Check Out/Check In</h1>
<LoadingIndicator @bind-Visible="@_busy">
    @if (_hasLoaded)
    {
        <Field>
            <TextEdit Placeholder="Search for skate..." @bind-Text="_search" Immediate="true"/>
        </Field>
        @if (_skates is not null)
        {
            <Table Striped>
                <TableBody>
                    @foreach (var skate in _skates.Where(s => (string.IsNullOrEmpty(_search) || s.Name.Contains(_search))))
                    {
                        <TableRow>
                            <TableRowHeader>@skate.Name</TableRowHeader>
                            <TableRowCell>
                                @switch (skate.Status)
                                {
                                    case SkateStatus.InUse:
                                        <Badge Color="Color.Info" Pill >Checked Out</Badge>
                                        break;

                                    case SkateStatus.Available:
                                        <Badge Color="Color.Success" Pill>Available</Badge>
                                        break;

                                    case SkateStatus.BeingSharpened:
                                        <Badge Color="Color.Secondary" Pill>Being Sharpened</Badge>
                                        break;
                                }
                            </TableRowCell>
                            <TableRowCell>
                                @if (skate.Status == SkateStatus.Available)
                                {
                                    <Buttons>
                                        <Button Color="Color.Primary" Clicked="async () => await UpdateSkateStatus(skate, SkateStatus.InUse)">
                                            Check Out
                                        </Button>
                                        <Button Color="Color.Secondary" Disabled>Check In</Button>
                                    </Buttons>
                                }
                                else if (skate.Status == SkateStatus.InUse)
                                {
                                    <Buttons>
                                        <Button Color="Color.Secondary" Disabled>Check Out</Button>
                                        <Button Color="Color.Primary" Clicked="async () => await UpdateSkateStatus(skate, SkateStatus.Available)">
                                            Check In
                                        </Button>
                                    </Buttons>
                                }
                                else
                                {
                                    <Buttons>
                                        <Button Color="Color.Secondary" Disabled>Check Out</Button>
                                        <Button Color="Color.Secondary" Disabled>Check In</Button>
                                    </Buttons>
                                }
                            </TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        }
        else //_skates is null 
        {
            <p>Uh oh! Either something went wrong or there are no skates to display!</p>
        }

    }
</LoadingIndicator>
@code {
    private List<Skate>? _skates;
    private bool _busy;
    private bool _hasLoaded;
    private string? _search;
    private List<Property>? _properties;
    private ApplicationUser user;
    protected override async Task OnInitializedAsync()
    {
        _busy = true;
        _hasLoaded = false;

        try
        {
            if (Context is not null)
            {
                //Get all non-archived skates
                _skates = await Context.Skates.Where(s=> !s.IsArchived).OrderBy(s=>s.Name).ToListAsync();
                //Get global properties
                _properties = await Context.Properties.ToListAsync();
            }
        }
        finally
        {
            _busy = false;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = await UserManager.GetUserAsync(authState.User);

        await base.OnInitializedAsync();
        _hasLoaded = true;
    }

    protected async Task UpdateSkateStatus(Skate skate, SkateStatus newStatus)
    {
        _busy = true;
        await Context.Entry(skate).Collection(s => s.SkateUsages).LoadAsync();

        SkateStatus oldStatus = skate.Status;

        AuditLog audit = new AuditLog()
        {
            Timestamp = DateTime.Now,
            Skate = skate,
            User = user,
        };

        if (newStatus == SkateStatus.InUse)
        {
            if (skate.MinutesUsed >
                Double.Parse(_properties.First(
                        p => p.Name == "MaxSkateUsageMinutes").Value))
            {
                if (await MessageService.Confirm("Skate needs to be sharpened. Are you sure you want to check out?", "Confirmation"))
                {
                    SkateUsage? usage = skate.SkateUsages.Find(s => s.TimeIn == null);

                    if (usage is null)
                    {
                        usage = new SkateUsage
                        {
                            TimeOut = DateTime.Now
                        };
                        skate.SkateUsages.Add(usage);
                    }
                    else
                    {
                        usage.TimeOut = DateTime.Now;
                    }
                    audit.Action = $"Checked skate out over max usage (Usage: {(skate.MinutesUsed / 60):0.## hours})";
                }
                else
                {
                    //If canceled, don't check out
                    _busy = false;
                    return;
                }
            }
            else
            {
                audit.Action = "Checked skate out";
            }
        } else if (newStatus == SkateStatus.Available && oldStatus == SkateStatus.InUse)
        {
            SkateUsage? usage = skate.SkateUsages.Find(s => s.TimeIn == null);
            if (usage is not null)
            {
                usage.TimeIn = DateTime.Now;
                TimeSpan? skateTimeSpan = usage.SkateDuration();
                if (skateTimeSpan is not null)
                {
                    skate.addMinutesUsed(skateTimeSpan.Value.TotalMinutes);
                }
            }
            //Warn if skate is over max usage minutes
            if (skate.MinutesUsed > Double.Parse(_properties.First(
                p => p.Name == "MaxSkateUsageMinutes").Value))
            {
                await MessageService.Warning("Skate has reached is max usage. Please set aside for sharpening", "Max Usage Reached");
            } else if (skate.MinutesUsed > Double.Parse(_properties.First(
                p => p.Name == "WarnSkateUsageMinutes").Value))
            {
                await MessageService.Info("Skate is almost at it's maximum usage. It can still be used but will need to be sharpened soon.", "Approaching max");
            }
            audit.Action = $"Checked skate in (Total usage: {(skate.MinutesUsed / 60):0.## hours})";
        }

        Context.AuditLogs.Add(audit);
        skate.Status = newStatus;
        await Context.SaveChangesAsync();
        _busy = false;
    }
}